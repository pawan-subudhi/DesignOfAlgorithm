//enter the number of elements u want to sort and the program will randomly generate that much number of elements onto a file then it will be copied to an array and 
then sorting will be performed on the array 
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 void bubbleSort(int arr[],int n)
{
	int swapped,i,j;
	for(i=0;i<n;i++)
	{
		swapped=0;
		for(j=0;j<n-i-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				swap(&arr[j],&arr[j+1]);
				swapped=1;
			}			
		}
		if(swapped==0)
			break;
	}	
}
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
int main()
{
	FILE *fp;
	int i,max,temp,n=0;
	clock_t start,end;
	double cpu_time_speed;
	int *arr;
	printf("enter the number of elements that need to be sorted :: ");
	scanf("%d",&max);

	//generating max number of random numbers onto the file
	fp=fopen("sortingdata.txt","w");
	srand(time(0));
	for(i=0;i<max;i++)
		fprintf(fp,"%d\t",rand()%max);
	fclose(fp);

	//copying the contents of file onto array
	arr=(int*)malloc(max*sizeof(int));
	i=0;
	fp=fopen("sortingdata.txt","r");
	while(fscanf(fp,"%d",&temp)!=EOF)
	{
		arr[i]=temp;
		i++;
	}

	//performing sorting on array
	start=clock();
        bubbleSort(arr, max);
	end=clock();

	//printing the sorted array
        printf("Sorted array: \n");
        printArray(arr, max);
	
	//calculating the cpu time for the aorting
	cpu_time_speed=(double)(end-start)/CLOCKS_PER_SEC;
	printf("the cpu time to perform sorting is:: %lf", cpu_time_speed);
    return 0;
}