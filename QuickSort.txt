//enter the number of elements u want to sort and the program will randomly generate that much number of elements onto a file then it will be copied to an array and 
//then sorting will be performed on the array 
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);  
 
    for (int j = low; j <= high- 1; j++)
    {
        if (arr[j] <= pivot)
        {
            i++; 
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
 
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
int main()
{
	FILE *fp;
	int i,max,temp,n=0;
	clock_t start,end;
	double cpu_time_speed;
	int *arr;
	printf("enter the number of elements that need to be sorted :: ");
	scanf("%d",&max);

	//generating max number of random numbers onto the file
	fp=fopen("sortingdata.txt","w");
	srand(time(0));
	for(i=0;i<max;i++)
		fprintf(fp,"%d\t",rand()%max);
	fclose(fp);
	
	//copying the contents of file onto array
	arr=(int*)malloc(n*sizeof(int));
	i=0;
	fp=fopen("sortingdata.txt","r");
	while(fscanf(fp,"%d",&temp)!=EOF)
	{
		arr[i]=temp;
		i++;
	}
	

	//performing sorting on array
	start=clock();
        quickSort(arr,0, max-1);
	end=clock();

	//printing the sorted array
        printf("Sorted array: \n");
         printArray(arr, max);
	 

	//calculating the cpu time for the aorting
	cpu_time_speed=(double)(end-start)/CLOCKS_PER_SEC;
	printf("the cpu time to perform sorting is:: %lf", cpu_time_speed);
    return 0;
}